(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/drag-drop'), require('rxjs'), require('@angular/common/http'), require('@angular/forms'), require('@angular/material/dialog'), require('rxjs/operators'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/menu'), require('@angular/material/table'), require('@angular/material/paginator'), require('@angular/cdk/overlay'), require('@angular/material/select'), require('@angular/material/list'), require('@angular/material/checkbox'), require('@angular/material/sort'), require('@angular/material/input'), require('@angular/material/datepicker'), require('@angular/material/chips'), require('@angular/material/progress-bar')) :
    typeof define === 'function' && define.amd ? define('@stamtech/datatable-utils', ['exports', '@angular/core', '@angular/cdk/drag-drop', 'rxjs', '@angular/common/http', '@angular/forms', '@angular/material/dialog', 'rxjs/operators', '@angular/common', '@angular/material/button', '@angular/material/icon', '@angular/material/menu', '@angular/material/table', '@angular/material/paginator', '@angular/cdk/overlay', '@angular/material/select', '@angular/material/list', '@angular/material/checkbox', '@angular/material/sort', '@angular/material/input', '@angular/material/datepicker', '@angular/material/chips', '@angular/material/progress-bar'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.stamtech = global.stamtech || {}, global.stamtech['datatable-utils'] = {}), global.ng.core, global.ng.cdk.dragDrop, global.rxjs, global.ng.common.http, global.ng.forms, global.ng.material.dialog, global.rxjs.operators, global.ng.common, global.ng.material.button, global.ng.material.icon, global.ng.material.menu, global.ng.material.table, global.ng.material.paginator, global.ng.cdk.overlay, global.ng.material.select, global.ng.material.list, global.ng.material.checkbox, global.ng.material.sort, global.ng.material.input, global.ng.material.datepicker, global.ng.material.chips, global.ng.material.progressBar));
}(this, (function (exports, core, dragDrop, rxjs, http, forms, dialog, operators, common, button, icon, menu, table, paginator, overlay, select, list, checkbox, sort, input, datepicker, chips, progressBar) { 'use strict';

    var ColumnSelectorComponent = /** @class */ (function () {
        function ColumnSelectorComponent() {
            this.menuVisible = false;
            this.columns = [];
            this.columnsChange = new core.EventEmitter();
            this.selectedColumns = [];
            this.selectedColumnsChange = new core.EventEmitter();
        }
        ColumnSelectorComponent.prototype.ngOnInit = function () { };
        ColumnSelectorComponent.prototype.toggleSelector = function () {
            this.menuVisible = !this.menuVisible;
        };
        // On backdrop click close the menu and send selectedColumnsChange event
        ColumnSelectorComponent.prototype.closeMenu = function () {
            this.menuVisible = false;
            this.selectedColumnsChange.emit(this.selectedColumns);
        };
        // After drop the array is reordered
        ColumnSelectorComponent.prototype.drop = function (event) {
            var previousColumn = this.columns[event.previousIndex];
            var currentColumn = this.columns[event.currentIndex];
            dragDrop.moveItemInArray(this.columns, event.previousIndex, event.currentIndex);
            var previousSelectIndex = this.selectedColumns.indexOf(previousColumn.key);
            var currentSelectIndex = this.selectedColumns.indexOf(currentColumn.key);
            if (previousSelectIndex != -1 && currentSelectIndex != -1) {
                dragDrop.moveItemInArray(this.selectedColumns, previousSelectIndex, currentSelectIndex);
            }
        };
        return ColumnSelectorComponent;
    }());
    ColumnSelectorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'column-selector',
                    template: "<button\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    (click)=\"toggleSelector()\"\r\n    cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\">\r\n    <mat-icon aria-label=\"Columns\">view_column</mat-icon>\r\n</button>\r\n<ng-template\r\n  cdkConnectedOverlay\r\n  [cdkConnectedOverlayOrigin]=\"trigger\"\r\n  [cdkConnectedOverlayOpen]=\"menuVisible\"\r\n  [cdkConnectedOverlayHasBackdrop]=\"true\"\r\n  (backdropClick)=\"closeMenu()\">\r\n    <mat-selection-list class=\"column-list mat-elevation-z8\"\r\n        [(ngModel)]=\"selectedColumns\"\r\n        cdkDropList  (cdkDropListDropped)=\"drop($event)\">\r\n        <mat-list-option *ngFor=\"let column of columns\" \r\n            class=\"column-item\" \r\n            checkboxPosition=\"before\"  \r\n            [disabled]=\"column.locked\"\r\n            [value]=\"column.key\"\r\n            cdkDrag>\r\n            <div class=\"columnItem\">\r\n              <span>{{column.label}} </span>\r\n              <mat-icon>drag_handle</mat-icon>\r\n            </div>\r\n          </mat-list-option>\r\n    </mat-selection-list>\r\n</ng-template>\r\n",
                    styles: [".column-list{min-width:200px;max-width:100%;border:1px solid #ccc;max-height:350px;display:block;background:#eee;overflow-y:auto}.cdk-drag-preview{display:flex;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.cdk-drag-placeholder{opacity:0}.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.columnItem{display:flex;justify-content:space-between}.columnItem mat-icon{cursor:-webkit-grab;cursor:grab}"]
                },] }
    ];
    ColumnSelectorComponent.ctorParameters = function () { return []; };
    ColumnSelectorComponent.propDecorators = {
        columns: [{ type: core.Input }],
        columnsChange: [{ type: core.Output }],
        selectedColumns: [{ type: core.Input }],
        selectedColumnsChange: [{ type: core.Output }]
    };

    var Filter = /** @class */ (function () {
        function Filter(key, label, type, options) {
            this.value = null;
            this.disabled = false;
            this.key = key;
            this.label = label;
            this.type = type;
            if (options)
                this.options = options.map(function (value) {
                    if (typeof value === 'string') {
                        return { id: value, label: value };
                    }
                    return value;
                });
        }
        return Filter;
    }());
    (function (FilterType) {
        FilterType["TEXT"] = "TEXT";
        FilterType["SELECT"] = "SELECT";
        FilterType["DATE"] = "DATE";
    })(exports.FilterType || (exports.FilterType = {}));
    /**
     * Track the current datatable filter status with :
     * - an array of applicable filters with their value
     * - the current pagination status
     * - the current sort field
     */
    var FilterSet = /** @class */ (function () {
        function FilterSet() {
            // Applicable filters
            this.filters = {};
            // Pagination
            this.limit = 10;
            this.page = null; // Zero based
            // Sorting
            this.sortField = null;
            this.sortDirection = 'Desc';
        }
        FilterSet.prototype.find = function (key) { return this.filters[key]; };
        FilterSet.prototype.add = function (filter) { this.filters[filter.key] = filter; };
        FilterSet.prototype.remove = function (key) { delete this.filters[key]; };
        FilterSet.prototype.isActive = function () { return this.getActiveFilters().length > 0; };
        FilterSet.prototype.clear = function () {
            var _this = this;
            Object.keys(this.filters).forEach(function (key) {
                _this.filters[key].value = null;
            });
        };
        FilterSet.prototype.reset = function () { this.filters = {}; };
        FilterSet.prototype.getActiveFilters = function () {
            return Object.values(this.filters).filter(function (f) { return (f.value !== null && f.value !== undefined); });
        };
        FilterSet.prototype.getParams = function () {
            console.log(this);
            var params = new http.HttpParams();
            if (this.page !== null) {
                params = params.append('page', this.page.toString());
                params = params.append('limit', this.limit.toString());
            }
            if (this.sortField) {
                params = params.append('sort', this.sortField.toString());
                params = params.append('direction', this.sortDirection.toString());
            }
            if (this.filters) {
                this.getActiveFilters().forEach(function (filter) { return params = params.append(filter.key, filter.value); });
            }
            return params;
        };
        FilterSet.prototype.setSort = function (field, direction) {
            this.sortField = field;
            this.sortDirection = direction;
            this.resetPage();
        };
        FilterSet.prototype.resetPage = function () {
            if (this.page)
                this.page = 0;
        };
        return FilterSet;
    }());

    var ColumnFilterService = /** @class */ (function () {
        function ColumnFilterService() {
            this.filterSet = new FilterSet();
            this.filterSetSubject = new rxjs.BehaviorSubject(this.filterSet);
            this.filterSet$ = this.filterSetSubject.asObservable();
        }
        ColumnFilterService.prototype.emitFilters = function () { this.filterSetSubject.next(this.filterSet); };
        // Filters methods  
        ColumnFilterService.prototype.addFilter = function (key, label, type, options) {
            this.filterSet.add(new Filter(key, label, type, options));
            this.emitFilters();
        };
        ColumnFilterService.prototype.removeFilter = function (key) {
            this.filterSet.remove(key);
            this.emitFilters();
        };
        ColumnFilterService.prototype.setFilter = function (key, value) {
            var filter = this.filterSet.find(key);
            if (filter) {
                filter.value = value;
                this.emitFilters();
            }
        };
        ColumnFilterService.prototype.clearFilter = function (key) { this.setFilter(key, null); };
        ColumnFilterService.prototype.updateFilters = function (filterSet) {
            this.filterSet = filterSet;
            this.emitFilters();
        };
        ColumnFilterService.prototype.isActive = function () {
            return this.filterSet.isActive();
        };
        ColumnFilterService.prototype.disableFilter = function (key) {
            var filter = this.filterSet.find(key);
            if (filter) {
                filter.disabled = true;
                this.emitFilters();
            }
        };
        ColumnFilterService.prototype.enableFilter = function (key) {
            var filter = this.filterSet.find(key);
            if (filter) {
                filter.disabled = false;
                this.emitFilters();
            }
        };
        ColumnFilterService.prototype.clearFilters = function () {
            this.filterSet.clear();
            this.emitFilters();
        };
        // Paging methods
        ColumnFilterService.prototype.setPage = function (page, limit) {
            this.filterSet.page = page;
            if (limit)
                this.filterSet.limit = limit;
            this.emitFilters();
        };
        ColumnFilterService.prototype.setLimit = function (limit) {
            this.filterSet.limit = limit;
            this.emitFilters();
        };
        // Sorting methods
        ColumnFilterService.prototype.setSort = function (field, direction) {
            this.filterSet.sortField = field;
            this.filterSet.sortDirection = direction;
            this.emitFilters();
        };
        return ColumnFilterService;
    }());

    var ChipsFilterComponent = /** @class */ (function () {
        function ChipsFilterComponent(filtersService) {
            var _this = this;
            this.filtersService = filtersService;
            this.chips = [];
            this.filtersService.filterSet$
                .subscribe(function (filterSet) { return _this.chips = filterSet.getActiveFilters(); });
        }
        ChipsFilterComponent.prototype.clear = function (key) { this.filtersService.clearFilter(key); };
        ChipsFilterComponent.prototype.clearFilters = function () { this.filtersService.clearFilters(); };
        return ChipsFilterComponent;
    }());
    ChipsFilterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'stam-chips-filter',
                    template: "<div class=\"infobox-container\" *ngIf=\"chips.length\">\r\n    <div class=\"mat-header-cell filter-header-label\" >Filtri attivi : </div>\r\n    <mat-chip-list>\r\n        <mat-chip *ngFor=\"let chip of chips\" \r\n            color=\"primary\"\r\n            selected=\"true\"\r\n            (removed)=\"clear(chip.key)\">\r\n            <mat-icon matChipRemove>cancel</mat-icon>\r\n            {{chip.label}} <span class=\"chipValue\">{{chip.value}}</span>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n    <div class=\"action-container\">\r\n        <button mat-button color=\"accent\" (click)=\"clearFilters()\">Cancella filtri</button>\r\n    </div>\r\n</div>\r\n\r\n",
                    styles: [".infobox-container{display:flex;align-items:center;min-height:56px;width:100%;background:#fff;border-bottom:1px solid rgba(0,0,0,.12)}.infobox-container .filter-header-label{width:8em;margin:0 24px}.infobox-container mat-chip-list{flex-grow:1;margin:1em 0}.infobox-container mat-chip-list .chipValue{background-color:hsla(0,0%,100%,.5);padding:7px 16px;border-radius:16px;margin-left:8px;margin-right:-12px;line-height:19px;max-width:8em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.infobox-container mat-chip-list mat-icon{margin-left:0!important;margin-right:8px!important}"]
                },] }
    ];
    ChipsFilterComponent.ctorParameters = function () { return [
        { type: ColumnFilterService }
    ]; };

    var DialogFilterComponent = /** @class */ (function () {
        function DialogFilterComponent(dialog, data) {
            var _this = this;
            this.dialog = dialog;
            this.data = data;
            this.filtersForm = new forms.FormGroup({});
            this.filtersService = data.filtersService;
            this.filtersService.filterSet$.subscribe(function (filterSet) {
                _this.filterSet = filterSet;
                Object.keys(_this.filterSet.filters).forEach(function (key) { return _this.filtersForm.addControl(key, new forms.FormControl({ value: _this.filterSet.filters[key].value, disabled: _this.filterSet.filters[key].disabled })); });
            });
        }
        DialogFilterComponent.prototype.clearFilters = function () {
            this.filtersForm.reset();
        };
        DialogFilterComponent.prototype.search = function () {
            var _this = this;
            Object.keys(this.filtersForm.controls).forEach(function (control) {
                var filter = _this.filterSet.find(control);
                if (filter)
                    filter.value = _this.filtersForm.controls[control].value;
            });
            this.filterSet.resetPage();
            this.filtersService.updateFilters(this.filterSet);
            this.dialog.close();
        };
        return DialogFilterComponent;
    }());
    DialogFilterComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'app-dialog-filter',
                    template: "<h2 mat-dialog-title>Filtri</h2>\r\n<div mat-dialog-content>\r\n    <form [formGroup]=\"filtersForm\">        \r\n        <div *ngFor=\"let filter of filterSet.filters | keyvalue\">\r\n            <ng-container [ngSwitch]=\"filter.value.type\">\r\n                <ng-container *ngSwitchCase=\"'TEXT'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <input matInput [formControlName]=\"filter.key\">\r\n                    </mat-form-field>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'SELECT'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <mat-select [formControlName]=\"filter.key\">\r\n                            <mat-option [value]=\"\">---</mat-option> \r\n                            <mat-option *ngFor=\"let opt of filter.value.options\" [value]=\"opt.id\">\r\n                                {{ opt.label }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'DATE'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" [formControlName]=\"filter.key\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </form>\r\n</div>\r\n<mat-dialog-actions align=\"end\">\r\n    <button class=\"clear-filters-button\" mat-raised-button (click)=\"clearFilters()\">Reset</button>\r\n    <button class=\"search-filters-button\" mat-raised-button color=\"primary\" (click)=\"search()\">Ricerca</button>\r\n</mat-dialog-actions>",
                    styles: [".mat-form-field { width: 100% }"]
                },] }
    ];
    DialogFilterComponent.ctorParameters = function () { return [
        { type: dialog.MatDialogRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
    ]; };

    var DatatableColumn = /** @class */ (function () {
        function DatatableColumn(key, label) {
            this.key = key;
            this.label = label;
            this.visible = true;
            this.locked = false;
            this.customContent = false;
            this.sortable = key;
        }
        return DatatableColumn;
    }());

    var ColumnsManagerService = /** @class */ (function () {
        function ColumnsManagerService() {
            this.columns = {};
        }
        ColumnsManagerService.prototype.addColumn = function (key, label) {
            this.columns[key] = new DatatableColumn(key, label);
        };
        ColumnsManagerService.prototype.setVisible = function (keys, value) {
            var _this = this;
            if (value === void 0) { value = true; }
            keys.forEach(function (k) { _this.columns[k].visible = value; });
        };
        ColumnsManagerService.prototype.setLocked = function (keys, value) {
            var _this = this;
            if (value === void 0) { value = true; }
            keys.forEach(function (k) { _this.columns[k].locked = value; });
        };
        ColumnsManagerService.prototype.setCustom = function (keys, value) {
            var _this = this;
            if (value === void 0) { value = true; }
            keys.forEach(function (k) { _this.columns[k].customContent = value; });
        };
        ColumnsManagerService.prototype.setSortable = function (keys, sortKey) {
            var _this = this;
            if (sortKey === void 0) { sortKey = ""; }
            keys.forEach(function (k) { _this.columns[k].sortable = sortKey; });
        };
        // Get all columns
        ColumnsManagerService.prototype.getColumns = function () {
            return Object.values(this.columns);
        };
        // Get only visible columns
        ColumnsManagerService.prototype.getDisplayedColumns = function () {
            return Object.values(this.columns).filter(function (c) { return c.visible; }).map(function (c) { return c.key; });
        };
        // Get only standard columns ( the content is simply the value )
        ColumnsManagerService.prototype.getStandardColumns = function () {
            return Object.values(this.columns).filter(function (c) { return !c.customContent; });
        };
        return ColumnsManagerService;
    }());

    var RowsResponse = /** @class */ (function () {
        function RowsResponse() {
            this.content = [];
            this.totalElements = 0;
        }
        return RowsResponse;
    }());

    var DatatableDatasource = /** @class */ (function () {
        function DatatableDatasource(rowsService) {
            this.rowsService = rowsService;
            this.rows = new rxjs.BehaviorSubject([]);
            this.loadingSubject = new rxjs.BehaviorSubject(false);
            this.loading$ = this.loadingSubject.asObservable();
            this.countSubject = new rxjs.BehaviorSubject(0);
            this.counter$ = this.countSubject.asObservable();
        }
        DatatableDatasource.prototype.connect = function (collectionViewer) {
            return this.rows.asObservable();
        };
        DatatableDatasource.prototype.disconnect = function (collectionViewer) {
            this.rows.complete();
            this.loadingSubject.complete();
            this.countSubject.complete();
        };
        DatatableDatasource.prototype.loadData = function (filterSet) {
            var _this = this;
            this.loadingSubject.next(true);
            this.rowsService.findAll(filterSet)
                .pipe(operators.catchError(function () { return rxjs.of(new RowsResponse()); }), operators.finalize(function () { return _this.loadingSubject.next(false); }))
                .subscribe(function (result) {
                _this.rows.next(result.content);
                _this.countSubject.next(result.totalElements);
            });
        };
        return DatatableDatasource;
    }());

    var StamDatatableModule = /** @class */ (function () {
        function StamDatatableModule() {
        }
        return StamDatatableModule;
    }());
    StamDatatableModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ColumnSelectorComponent,
                        DialogFilterComponent,
                        ChipsFilterComponent,
                    ],
                    imports: [
                        common.CommonModule,
                        datepicker.MatDatepickerModule,
                        input.MatInputModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        menu.MatMenuModule,
                        icon.MatIconModule,
                        //MatBadgeModule,
                        button.MatButtonModule,
                        //MatTooltipModule,
                        //MatToolbarModule,
                        overlay.OverlayModule,
                        table.MatTableModule,
                        paginator.MatPaginatorModule,
                        select.MatSelectModule,
                        dragDrop.DragDropModule,
                        list.MatListModule,
                        checkbox.MatCheckboxModule,
                        sort.MatSortModule,
                        dialog.MatDialogModule,
                        chips.MatChipsModule,
                        progressBar.MatProgressBarModule
                    ],
                    exports: [
                        ColumnSelectorComponent,
                        DialogFilterComponent,
                        ChipsFilterComponent
                    ]
                },] }
    ];

    /*
     * Public API Surface of datatable-utils
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ChipsFilterComponent = ChipsFilterComponent;
    exports.ColumnFilterService = ColumnFilterService;
    exports.ColumnSelectorComponent = ColumnSelectorComponent;
    exports.ColumnsManagerService = ColumnsManagerService;
    exports.DatatableColumn = DatatableColumn;
    exports.DatatableDatasource = DatatableDatasource;
    exports.DialogFilterComponent = DialogFilterComponent;
    exports.Filter = Filter;
    exports.FilterSet = FilterSet;
    exports.RowsResponse = RowsResponse;
    exports.StamDatatableModule = StamDatatableModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=stamtech-datatable-utils.umd.js.map
