{"version":3,"sources":["../../../projects/datatable-utils/src/lib/components/column-selector/column-selector.component.ts","../../../projects/datatable-utils/src/lib/shared/datatable.types.ts","../../../projects/datatable-utils/src/lib/services/column-filter.service.ts","../../../projects/datatable-utils/src/lib/components/chips-filter/chips-filter.component.ts","../../../projects/datatable-utils/src/lib/components/dialog-filter/dialog-filter.component.ts","../../../projects/datatable-utils/src/lib/shared/datatable.column.ts","../../../projects/datatable-utils/src/lib/services/columns-manager.service.ts","../../../projects/datatable-utils/src/lib/services/datatable.service.interface.ts","../../../projects/datatable-utils/src/lib/shared/datatable.datasource.ts","../../../projects/datatable-utils/src/lib/datatable-utils.module.ts"],"names":["ColumnSelectorComponent","this","menuVisible","columns","columnsChange","EventEmitter","selectedColumns","selectedColumnsChange","prototype","ngOnInit","toggleSelector","closeMenu","emit","drop","event","previousColumn","previousIndex","currentColumn","currentIndex","moveItemInArray","previousSelectIndex","indexOf","key","currentSelectIndex","Component","args","selector","template","Input","Output","FilterType","label","type","options","value","disabled","map","id","FilterSet","filters","limit","page","sortField","sortDirection","find","add","filter","remove","isActive","getActiveFilters","length","clear","_this","Object","keys","forEach","reset","values","f","undefined","getParams","console","log","params","HttpParams","append","toString","setSort","field","direction","resetPage","ColumnFilterService","filterSet","filterSetSubject","BehaviorSubject","filterSet$","asObservable","emitFilters","next","addFilter","Filter","removeFilter","setFilter","clearFilter","updateFilters","disableFilter","enableFilter","clearFilters","setPage","setLimit","ChipsFilterComponent","filtersService","chips","subscribe","DialogFilterComponent","dialog","data","filtersForm","FormGroup","addControl","FormControl","search","controls","control","close","MatDialogRef","Inject","MAT_DIALOG_DATA","visible","locked","customContent","sortable","ColumnsManagerService","addColumn","DatatableColumn","setVisible","k","setLocked","setCustom","setSortable","sortKey","getColumns","getDisplayedColumns","c","getStandardColumns","content","totalElements","DatatableDatasource","rowsService","rows","loadingSubject","loading$","countSubject","counter$","connect","collectionViewer","disconnect","complete","loadData","findAll","pipe","catchError","of","RowsResponse","finalize","result","NgModule","declarations","imports","CommonModule","MatDatepickerModule","MatInputModule","FormsModule","ReactiveFormsModule","MatMenuModule","MatIconModule","MatButtonModule","OverlayModule","MatTableModule","MatPaginatorModule","MatSelectModule","DragDropModule","MatListModule","MatCheckboxModule","MatSortModule","MatDialogModule","MatChipsModule","MatProgressBarModule","exports"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { DatatableColumn } from '../../shared/datatable.column';\r\n\r\n@Component({\r\n  selector: 'column-selector',\r\n  templateUrl: './column-selector.component.html',\r\n  styleUrls: ['./column-selector.component.scss']\r\n})\r\nexport class ColumnSelectorComponent implements OnInit {\r\n  menuVisible = false;\r\n  @Input() columns: DatatableColumn[] = [];\r\n  @Output() columnsChange = new EventEmitter<DatatableColumn[]>();\r\n  @Input() selectedColumns: string[] = [];\r\n  @Output() selectedColumnsChange = new EventEmitter<string[]>();\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  toggleSelector() {\r\n    this.menuVisible = !this.menuVisible;\r\n  }\r\n\r\n  // On backdrop click close the menu and send selectedColumnsChange event\r\n  closeMenu() {\r\n      this.menuVisible = false;\r\n      this.selectedColumnsChange.emit(this.selectedColumns);\r\n  }\r\n\r\n  // After drop the array is reordered\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    const previousColumn = this.columns[event.previousIndex];\r\n    const currentColumn = this.columns[event.currentIndex];\r\n    moveItemInArray(this.columns, event.previousIndex, event.currentIndex);\r\n    const previousSelectIndex = this.selectedColumns.indexOf(previousColumn.key);\r\n    const currentSelectIndex = this.selectedColumns.indexOf(currentColumn.key);\r\n    if (previousSelectIndex!=-1 && currentSelectIndex!=-1) {\r\n      moveItemInArray(this.selectedColumns, previousSelectIndex, currentSelectIndex);\r\n    }\r\n  }\r\n}\r\n","import { HttpParams } from \"@angular/common/http\";\r\n\r\nexport class Filter {\r\n    key: string;\r\n    label: string;\r\n    type: FilterType;\r\n    options?: FilterOption[];\r\n    value?: any = null;\r\n    disabled?: boolean = false;\r\n\r\n    constructor(key: string, label: string, type: FilterType, options?: (string | FilterOption)[]) {\r\n        this.key = key;\r\n        this.label = label;\r\n        this.type = type;\r\n\r\n        if (options)\r\n            this.options = options.map((value : string | FilterOption) => {\r\n                if (typeof value === 'string') {\r\n                    return { id: value, label: value}\r\n                }\r\n                return value;\r\n            })\r\n    }\r\n}\r\n\r\nexport enum FilterType {\r\n    TEXT = \"TEXT\",\r\n    SELECT = \"SELECT\",\r\n    DATE = \"DATE\"\r\n}\r\n\r\nexport type FilterOption = { id:string | number, label:string }\r\n\r\n/**\r\n * Track the current datatable filter status with :\r\n * - an array of applicable filters with their value\r\n * - the current pagination status\r\n * - the current sort field\r\n */\r\nexport class FilterSet {\r\n    // Applicable filters\r\n    filters: {[id: string]: Filter} = {}\r\n\r\n    // Pagination\r\n    limit: number = 10;\r\n    page: number = null; // Zero based\r\n    \r\n    // Sorting\r\n    sortField: string = null;\r\n    sortDirection: string = 'Desc';\r\n    \r\n\r\n    find(key) { return this.filters[key]; }\r\n\r\n    add(filter: Filter) { this.filters[filter.key] = filter; }\r\n\r\n    remove(key:string) { delete this.filters[key]; }\r\n\r\n    isActive() { return this.getActiveFilters().length>0; }\r\n\r\n    clear() { \r\n        Object.keys(this.filters).forEach(key => {\r\n            this.filters[key].value = null;\r\n        })\r\n    }\r\n\r\n    reset() { this.filters = {}; }\r\n\r\n\r\n    getActiveFilters() {\r\n        return Object.values(this.filters).filter(f => (f.value!==null && f.value!==undefined))\r\n    }\r\n\r\n    getParams(): HttpParams {\r\n        console.log(this)\r\n        let params = new HttpParams();\r\n        if (this.page !== null) {\r\n            params = params.append('page', this.page.toString());\r\n            params = params.append('limit', this.limit.toString());\r\n        }\r\n        if (this.sortField) {\r\n            params = params.append('sort', this.sortField.toString());\r\n            params = params.append('direction', this.sortDirection.toString());\r\n        }\r\n        if (this.filters) {\r\n            this.getActiveFilters().forEach((filter: Filter) => \r\n                params = params.append(filter.key, filter.value)\r\n            );\r\n        }\r\n        return params;\r\n    }\r\n\r\n    setSort(field, direction) {\r\n        this.sortField = field;\r\n        this.sortDirection = direction;\r\n        this.resetPage();\r\n    }\r\n\r\n    resetPage() { \r\n        if (this.page) this.page = 0;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Filter, FilterOption, FilterSet, FilterType } from '../shared/datatable.types';\r\n\r\nexport class ColumnFilterService {\r\n  \r\n  private filterSet = new FilterSet();\r\n  private filterSetSubject = new BehaviorSubject<FilterSet>(this.filterSet);\r\n  filterSet$ = this.filterSetSubject.asObservable();\r\n  \r\n  constructor() { }\r\n\r\n  emitFilters() { this.filterSetSubject.next(this.filterSet); }\r\n\r\n  // Filters methods  \r\n  addFilter(key: string, label: string, type: FilterType, options?: (string | FilterOption)[]) {\r\n    this.filterSet.add(new Filter(key, label, type, options));\r\n    this.emitFilters();\r\n  }\r\n\r\n  removeFilter(key: string) {  \r\n    this.filterSet.remove(key);   \r\n    this.emitFilters();\r\n  }\r\n\r\n  setFilter(key: string, value: any) {\r\n    let filter = this.filterSet.find(key);\r\n    if (filter) {\r\n      filter.value = value;\r\n      this.emitFilters();\r\n    }\r\n  }\r\n\r\n  clearFilter(key: string) {  this.setFilter(key, null);   }\r\n\r\n  updateFilters(filterSet: FilterSet) { \r\n    this.filterSet = filterSet;\r\n    this.emitFilters();\r\n  }\r\n\r\n  isActive(): boolean { \r\n    return this.filterSet.isActive() \r\n  }\r\n\r\n  disableFilter(key: string) {\r\n    let filter = this.filterSet.find(key);\r\n    if (filter) {\r\n      filter.disabled = true;\r\n      this.emitFilters();\r\n    }\r\n  }\r\n\r\n  enableFilter(key: string) {\r\n    let filter = this.filterSet.find(key);\r\n    if (filter) {\r\n      filter.disabled = false;\r\n      this.emitFilters();\r\n    }\r\n  }\r\n\r\n  clearFilters() { \r\n    this.filterSet.clear(); \r\n    this.emitFilters();\r\n  }\r\n\r\n  // Paging methods\r\n  setPage(page:number, limit?:number) { \r\n    this.filterSet.page = page; \r\n    if (limit) this.filterSet.limit = limit; \r\n    this.emitFilters();\r\n  }\r\n\r\n  setLimit(limit:number) { \r\n    this.filterSet.limit = limit; \r\n    this.emitFilters();\r\n  }\r\n\r\n  // Sorting methods\r\n  setSort(field, direction) {\r\n    this.filterSet.sortField = field;\r\n    this.filterSet.sortDirection = direction;\r\n    this.emitFilters();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ColumnFilterService } from '../../services/column-filter.service';\r\nimport { Filter } from '../../shared/datatable.types';\r\n\r\n\r\n@Component({\r\n  selector: 'stam-chips-filter',\r\n  templateUrl: './chips-filter.component.html',\r\n  styleUrls: ['./chips-filter.component.scss']\r\n})\r\nexport class ChipsFilterComponent {\r\n  chips: Filter[] = [];\r\n  constructor(private filtersService: ColumnFilterService) { \r\n    this.filtersService.filterSet$\r\n      .subscribe(filterSet => this.chips = filterSet.getActiveFilters());\r\n  }\r\n\r\n  clear(key: string) { this.filtersService.clearFilter(key); }\r\n  clearFilters() { this.filtersService.clearFilters(); }\r\n}","import { Component, Inject } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ColumnFilterService } from '../../services/column-filter.service';\r\nimport { FilterSet } from '../../shared/datatable.types';\r\n\r\n@Component({\r\n  selector: 'app-dialog-filter',\r\n  templateUrl: './dialog-filter.component.html',\r\n  styles: [ \".mat-form-field { width: 100% }\"]\r\n})\r\nexport class DialogFilterComponent {\r\n  filterSet: FilterSet;\r\n  filtersForm = new FormGroup({});\r\n  filtersService: ColumnFilterService;\r\n\r\n  constructor(private dialog: MatDialogRef<DialogFilterComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.filtersService = data.filtersService;\r\n    this.filtersService.filterSet$.subscribe(filterSet => {\r\n      this.filterSet = filterSet;\r\n      Object.keys(this.filterSet.filters).forEach(key => \r\n        this.filtersForm.addControl(key, new FormControl({ value: this.filterSet.filters[key].value, disabled: this.filterSet.filters[key].disabled})));\r\n    });\r\n  }\r\n\r\n  clearFilters() {\r\n    this.filtersForm.reset();\r\n  }\r\n\r\n  search() {\r\n    Object.keys(this.filtersForm.controls).forEach(control => {\r\n      const filter = this.filterSet.find(control);\r\n      if (filter)\r\n        filter.value = this.filtersForm.controls[control].value;\r\n    });\r\n    this.filterSet.resetPage()\r\n    this.filtersService.updateFilters(this.filterSet);\r\n    this.dialog.close();\r\n  }\r\n\r\n}","export class DatatableColumn {\r\n    key: string;\r\n    label: string;\r\n\r\n    // Visible status on table first render\r\n    visible?: boolean;\r\n\r\n    // Key for sorting on backend\r\n    sortable?: string;\r\n\r\n    // Disabled in column selector \r\n    locked?: boolean;\r\n\r\n    // Skipped if is content is rendered in a custom ng-template\r\n    customContent?: boolean;\r\n\r\n    constructor(key: string, label: string) {\r\n        this.key = key;\r\n        this.label = label;\r\n        this.visible = true;\r\n        this.locked = false;\r\n        this.customContent = false;\r\n        this.sortable = key;\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { DatatableColumn } from \"../shared/datatable.column\";\r\n\r\nexport class ColumnsManagerService {\r\n    private columns: { [id: string] : DatatableColumn; } = {}\r\n\r\n    constructor() {}\r\n\r\n    addColumn(key: string, label: string) { \r\n        this.columns[key] = new DatatableColumn(key,label); \r\n    }\r\n\r\n    setVisible(keys: string[], value = true)  { keys.forEach(k => { this.columns[k].visible = value }); }\r\n    setLocked(keys: string[], value = true)   { keys.forEach(k => { this.columns[k].locked = value }); }\r\n    setCustom(keys: string[], value = true)   { keys.forEach(k => { this.columns[k].customContent = value }); }\r\n    setSortable(keys: string[], sortKey = \"\") { keys.forEach(k => { this.columns[k].sortable = sortKey }); }\r\n\r\n    // Get all columns\r\n    getColumns() { \r\n        return Object.values(this.columns);\r\n    }\r\n\r\n    // Get only visible columns\r\n    getDisplayedColumns() { \r\n        return Object.values(this.columns).filter(c => c.visible).map(c => c.key);\r\n    }\r\n\r\n    // Get only standard columns ( the content is simply the value )\r\n    getStandardColumns() { \r\n        return Object.values(this.columns).filter(c => !c.customContent);\r\n    }\r\n}","import { Observable } from \"rxjs\";\r\nimport { FilterSet } from \"../shared/datatable.types\";\r\n\r\nexport interface DatatableService<T> {\r\n    findAll(filterSet: FilterSet): Observable<RowsResponse<T>>\r\n}\r\n\r\nexport class RowsResponse<T> {\r\n    content: T[] = []\r\n    totalElements: number = 0;\r\n}","import { CollectionViewer, DataSource } from \"@angular/cdk/collections\"\r\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\r\nimport { catchError, finalize } from \"rxjs/operators\";\r\nimport { FilterSet } from \"./datatable.types\";\r\nimport { DatatableService, RowsResponse } from \"../services/datatable.service.interface\";\r\n\r\n\r\nexport class DatatableDatasource<T> implements DataSource<T> {\r\n    private rows = new BehaviorSubject<T[]>([]);\r\n    private loadingSubject = new BehaviorSubject<boolean>(false);\r\n    public loading$ = this.loadingSubject.asObservable();\r\n    private countSubject = new BehaviorSubject<number>(0);\r\n    public counter$ = this.countSubject.asObservable();\r\n    \r\n    constructor(private rowsService: DatatableService<T>) { }\r\n    \r\n    connect(collectionViewer: CollectionViewer): Observable<T[]> {\r\n        return this.rows.asObservable();\r\n    }\r\n\r\n    disconnect(collectionViewer: CollectionViewer): void {\r\n        this.rows.complete();\r\n        this.loadingSubject.complete();\r\n        this.countSubject.complete();\r\n    }\r\n\r\n    loadData(filterSet: FilterSet) {\r\n        this.loadingSubject.next(true);\r\n        this.rowsService.findAll(filterSet)\r\n            .pipe(\r\n                catchError(() => of(new RowsResponse<T>())),\r\n                finalize(() => this.loadingSubject.next(false))\r\n            )\r\n            .subscribe((result: RowsResponse<T>) => {\r\n                this.rows.next(result.content);\r\n                this.countSubject.next(result.totalElements);\r\n            });\r\n    }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar'\r\n\r\nimport { ChipsFilterComponent } from './components/chips-filter/chips-filter.component';\r\nimport { DialogFilterComponent } from './components/dialog-filter/dialog-filter.component';\r\nimport { ColumnSelectorComponent } from './components/column-selector/column-selector.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ColumnSelectorComponent, \r\n    DialogFilterComponent, \r\n    ChipsFilterComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    //MatBadgeModule,\r\n    MatButtonModule,\r\n    //MatTooltipModule,\r\n    //MatToolbarModule,\r\n    OverlayModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    DragDropModule,\r\n    MatListModule,\r\n    MatCheckboxModule,\r\n    MatSortModule,\r\n    MatDialogModule,\r\n    MatChipsModule,\r\n    MatProgressBarModule\r\n  ],\r\n  exports: [\r\n    ColumnSelectorComponent,\r\n    DialogFilterComponent,\r\n    ChipsFilterComponent\r\n  ]\r\n})\r\nexport class StamDatatableModule { }\r\n"]}