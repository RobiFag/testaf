import { Component, Inject } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
export class DialogFilterComponent {
    constructor(dialog, data) {
        this.dialog = dialog;
        this.data = data;
        this.filtersForm = new FormGroup({});
        this.filtersService = data.filtersService;
        this.filtersService.filterSet$.subscribe(filterSet => {
            this.filterSet = filterSet;
            Object.keys(this.filterSet.filters).forEach(key => this.filtersForm.addControl(key, new FormControl({ value: this.filterSet.filters[key].value, disabled: this.filterSet.filters[key].disabled })));
        });
    }
    clearFilters() {
        this.filtersForm.reset();
    }
    search() {
        Object.keys(this.filtersForm.controls).forEach(control => {
            const filter = this.filterSet.find(control);
            if (filter)
                filter.value = this.filtersForm.controls[control].value;
        });
        this.filterSet.resetPage();
        this.filtersService.updateFilters(this.filterSet);
        this.dialog.close();
    }
}
DialogFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-dialog-filter',
                template: "<h2 mat-dialog-title>Filtri</h2>\r\n<div mat-dialog-content>\r\n    <form [formGroup]=\"filtersForm\">        \r\n        <div *ngFor=\"let filter of filterSet.filters | keyvalue\">\r\n            <ng-container [ngSwitch]=\"filter.value.type\">\r\n                <ng-container *ngSwitchCase=\"'TEXT'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <input matInput [formControlName]=\"filter.key\">\r\n                    </mat-form-field>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'SELECT'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <mat-select [formControlName]=\"filter.key\">\r\n                            <mat-option [value]=\"\">---</mat-option> \r\n                            <mat-option *ngFor=\"let opt of filter.value.options\" [value]=\"opt.id\">\r\n                                {{ opt.label }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n                <ng-container *ngSwitchCase=\"'DATE'\">\r\n                    <mat-form-field>\r\n                        <mat-label>{{ filter.value.label }}</mat-label>\r\n                        <input matInput [matDatepicker]=\"picker\" [formControlName]=\"filter.key\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                    </mat-form-field>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </form>\r\n</div>\r\n<mat-dialog-actions align=\"end\">\r\n    <button class=\"clear-filters-button\" mat-raised-button (click)=\"clearFilters()\">Reset</button>\r\n    <button class=\"search-filters-button\" mat-raised-button color=\"primary\" (click)=\"search()\">Ricerca</button>\r\n</mat-dialog-actions>",
                styles: [".mat-form-field { width: 100% }"]
            },] }
];
DialogFilterComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kYXRhdGFibGUtdXRpbHMvc3JjL2xpYi9jb21wb25lbnRzL2RpYWxvZy1maWx0ZXIvZGlhbG9nLWZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBU3pFLE1BQU0sT0FBTyxxQkFBcUI7SUFLaEMsWUFBb0IsTUFBMkMsRUFDbkIsSUFBUztRQURqQyxXQUFNLEdBQU4sTUFBTSxDQUFxQztRQUNuQixTQUFJLEdBQUosSUFBSSxDQUFLO1FBSnJELGdCQUFXLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFLOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNuRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN2RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxJQUFJLE1BQU07Z0JBQ1IsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7OztZQWpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isa2tFQUE2Qzt5QkFDbkMsaUNBQWlDO2FBQzVDOzs7WUFSUSxZQUFZOzRDQWVOLE1BQU0sU0FBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgTWF0RGlhbG9nUmVmLCBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xyXG5pbXBvcnQgeyBDb2x1bW5GaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29sdW1uLWZpbHRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRmlsdGVyU2V0IH0gZnJvbSAnLi4vLi4vc2hhcmVkL2RhdGF0YWJsZS50eXBlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1kaWFsb2ctZmlsdGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZGlhbG9nLWZpbHRlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVzOiBbIFwiLm1hdC1mb3JtLWZpZWxkIHsgd2lkdGg6IDEwMCUgfVwiXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGlhbG9nRmlsdGVyQ29tcG9uZW50IHtcclxuICBmaWx0ZXJTZXQ6IEZpbHRlclNldDtcclxuICBmaWx0ZXJzRm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xyXG4gIGZpbHRlcnNTZXJ2aWNlOiBDb2x1bW5GaWx0ZXJTZXJ2aWNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nUmVmPERpYWxvZ0ZpbHRlckNvbXBvbmVudD4sXHJcbiAgICAgICAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuZmlsdGVyc1NlcnZpY2UgPSBkYXRhLmZpbHRlcnNTZXJ2aWNlO1xyXG4gICAgdGhpcy5maWx0ZXJzU2VydmljZS5maWx0ZXJTZXQkLnN1YnNjcmliZShmaWx0ZXJTZXQgPT4ge1xyXG4gICAgICB0aGlzLmZpbHRlclNldCA9IGZpbHRlclNldDtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5maWx0ZXJTZXQuZmlsdGVycykuZm9yRWFjaChrZXkgPT4gXHJcbiAgICAgICAgdGhpcy5maWx0ZXJzRm9ybS5hZGRDb250cm9sKGtleSwgbmV3IEZvcm1Db250cm9sKHsgdmFsdWU6IHRoaXMuZmlsdGVyU2V0LmZpbHRlcnNba2V5XS52YWx1ZSwgZGlzYWJsZWQ6IHRoaXMuZmlsdGVyU2V0LmZpbHRlcnNba2V5XS5kaXNhYmxlZH0pKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsZWFyRmlsdGVycygpIHtcclxuICAgIHRoaXMuZmlsdGVyc0Zvcm0ucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHNlYXJjaCgpIHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMuZmlsdGVyc0Zvcm0uY29udHJvbHMpLmZvckVhY2goY29udHJvbCA9PiB7XHJcbiAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZmlsdGVyU2V0LmZpbmQoY29udHJvbCk7XHJcbiAgICAgIGlmIChmaWx0ZXIpXHJcbiAgICAgICAgZmlsdGVyLnZhbHVlID0gdGhpcy5maWx0ZXJzRm9ybS5jb250cm9sc1tjb250cm9sXS52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5maWx0ZXJTZXQucmVzZXRQYWdlKClcclxuICAgIHRoaXMuZmlsdGVyc1NlcnZpY2UudXBkYXRlRmlsdGVycyh0aGlzLmZpbHRlclNldCk7XHJcbiAgICB0aGlzLmRpYWxvZy5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbn0iXX0=