import { HttpParams } from "@angular/common/http";
export class Filter {
    constructor(key, label, type, options) {
        this.value = null;
        this.disabled = false;
        this.key = key;
        this.label = label;
        this.type = type;
        if (options)
            this.options = options.map((value) => {
                if (typeof value === 'string') {
                    return { id: value, label: value };
                }
                return value;
            });
    }
}
export var FilterType;
(function (FilterType) {
    FilterType["TEXT"] = "TEXT";
    FilterType["SELECT"] = "SELECT";
    FilterType["DATE"] = "DATE";
})(FilterType || (FilterType = {}));
/**
 * Track the current datatable filter status with :
 * - an array of applicable filters with their value
 * - the current pagination status
 * - the current sort field
 */
export class FilterSet {
    constructor() {
        // Applicable filters
        this.filters = {};
        // Pagination
        this.limit = 10;
        this.page = null; // Zero based
        // Sorting
        this.sortField = null;
        this.sortDirection = 'Desc';
    }
    find(key) { return this.filters[key]; }
    add(filter) { this.filters[filter.key] = filter; }
    remove(key) { delete this.filters[key]; }
    isActive() { return this.getActiveFilters().length > 0; }
    clear() {
        Object.keys(this.filters).forEach(key => {
            this.filters[key].value = null;
        });
    }
    reset() { this.filters = {}; }
    getActiveFilters() {
        return Object.values(this.filters).filter(f => (f.value !== null && f.value !== undefined));
    }
    getParams() {
        console.log(this);
        let params = new HttpParams();
        if (this.page !== null) {
            params = params.append('page', this.page.toString());
            params = params.append('limit', this.limit.toString());
        }
        if (this.sortField) {
            params = params.append('sort', this.sortField.toString());
            params = params.append('direction', this.sortDirection.toString());
        }
        if (this.filters) {
            this.getActiveFilters().forEach((filter) => params = params.append(filter.key, filter.value));
        }
        return params;
    }
    setSort(field, direction) {
        this.sortField = field;
        this.sortDirection = direction;
        this.resetPage();
    }
    resetPage() {
        if (this.page)
            this.page = 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLnR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZGF0YXRhYmxlLXV0aWxzL3NyYy9saWIvc2hhcmVkL2RhdGF0YWJsZS50eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsTUFBTSxPQUFPLE1BQU07SUFRZixZQUFZLEdBQVcsRUFBRSxLQUFhLEVBQUUsSUFBZ0IsRUFBRSxPQUFtQztRQUg3RixVQUFLLEdBQVMsSUFBSSxDQUFDO1FBQ25CLGFBQVEsR0FBYSxLQUFLLENBQUM7UUFHdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixJQUFJLE9BQU87WUFDUCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUE2QixFQUFFLEVBQUU7Z0JBQ3pELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO29CQUMzQixPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFDLENBQUE7aUJBQ3BDO2dCQUNELE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztDQUNKO0FBRUQsTUFBTSxDQUFOLElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNsQiwyQkFBYSxDQUFBO0lBQ2IsK0JBQWlCLENBQUE7SUFDakIsMkJBQWEsQ0FBQTtBQUNqQixDQUFDLEVBSlcsVUFBVSxLQUFWLFVBQVUsUUFJckI7QUFJRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBQXRCO1FBQ0kscUJBQXFCO1FBQ3JCLFlBQU8sR0FBMkIsRUFBRSxDQUFBO1FBRXBDLGFBQWE7UUFDYixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLFNBQUksR0FBVyxJQUFJLENBQUMsQ0FBQyxhQUFhO1FBRWxDLFVBQVU7UUFDVixjQUFTLEdBQVcsSUFBSSxDQUFDO1FBQ3pCLGtCQUFhLEdBQVcsTUFBTSxDQUFDO0lBb0RuQyxDQUFDO0lBakRHLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2QyxHQUFHLENBQUMsTUFBYyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFMUQsTUFBTSxDQUFDLEdBQVUsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhELFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZELEtBQUs7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELEtBQUssS0FBSyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFHOUIsZ0JBQWdCO1FBQ1osT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUMzRixDQUFDO0lBRUQsU0FBUztRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDakIsSUFBSSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ3BCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDckQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUMxRDtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzFELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDdEU7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUMvQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FDbkQsQ0FBQztTQUNMO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFNBQVM7UUFDTCxJQUFJLElBQUksQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFBhcmFtcyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlciB7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBGaWx0ZXJUeXBlO1xyXG4gICAgb3B0aW9ucz86IEZpbHRlck9wdGlvbltdO1xyXG4gICAgdmFsdWU/OiBhbnkgPSBudWxsO1xyXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcsIHR5cGU6IEZpbHRlclR5cGUsIG9wdGlvbnM/OiAoc3RyaW5nIHwgRmlsdGVyT3B0aW9uKVtdKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zKVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLm1hcCgodmFsdWUgOiBzdHJpbmcgfCBGaWx0ZXJPcHRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgaWQ6IHZhbHVlLCBsYWJlbDogdmFsdWV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEZpbHRlclR5cGUge1xyXG4gICAgVEVYVCA9IFwiVEVYVFwiLFxyXG4gICAgU0VMRUNUID0gXCJTRUxFQ1RcIixcclxuICAgIERBVEUgPSBcIkRBVEVcIlxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBGaWx0ZXJPcHRpb24gPSB7IGlkOnN0cmluZyB8IG51bWJlciwgbGFiZWw6c3RyaW5nIH1cclxuXHJcbi8qKlxyXG4gKiBUcmFjayB0aGUgY3VycmVudCBkYXRhdGFibGUgZmlsdGVyIHN0YXR1cyB3aXRoIDpcclxuICogLSBhbiBhcnJheSBvZiBhcHBsaWNhYmxlIGZpbHRlcnMgd2l0aCB0aGVpciB2YWx1ZVxyXG4gKiAtIHRoZSBjdXJyZW50IHBhZ2luYXRpb24gc3RhdHVzXHJcbiAqIC0gdGhlIGN1cnJlbnQgc29ydCBmaWVsZFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZpbHRlclNldCB7XHJcbiAgICAvLyBBcHBsaWNhYmxlIGZpbHRlcnNcclxuICAgIGZpbHRlcnM6IHtbaWQ6IHN0cmluZ106IEZpbHRlcn0gPSB7fVxyXG5cclxuICAgIC8vIFBhZ2luYXRpb25cclxuICAgIGxpbWl0OiBudW1iZXIgPSAxMDtcclxuICAgIHBhZ2U6IG51bWJlciA9IG51bGw7IC8vIFplcm8gYmFzZWRcclxuICAgIFxyXG4gICAgLy8gU29ydGluZ1xyXG4gICAgc29ydEZpZWxkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgc29ydERpcmVjdGlvbjogc3RyaW5nID0gJ0Rlc2MnO1xyXG4gICAgXHJcblxyXG4gICAgZmluZChrZXkpIHsgcmV0dXJuIHRoaXMuZmlsdGVyc1trZXldOyB9XHJcblxyXG4gICAgYWRkKGZpbHRlcjogRmlsdGVyKSB7IHRoaXMuZmlsdGVyc1tmaWx0ZXIua2V5XSA9IGZpbHRlcjsgfVxyXG5cclxuICAgIHJlbW92ZShrZXk6c3RyaW5nKSB7IGRlbGV0ZSB0aGlzLmZpbHRlcnNba2V5XTsgfVxyXG5cclxuICAgIGlzQWN0aXZlKCkgeyByZXR1cm4gdGhpcy5nZXRBY3RpdmVGaWx0ZXJzKCkubGVuZ3RoPjA7IH1cclxuXHJcbiAgICBjbGVhcigpIHsgXHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyc1trZXldLnZhbHVlID0gbnVsbDtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0KCkgeyB0aGlzLmZpbHRlcnMgPSB7fTsgfVxyXG5cclxuXHJcbiAgICBnZXRBY3RpdmVGaWx0ZXJzKCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZmlsdGVycykuZmlsdGVyKGYgPT4gKGYudmFsdWUhPT1udWxsICYmIGYudmFsdWUhPT11bmRlZmluZWQpKVxyXG4gICAgfVxyXG5cclxuICAgIGdldFBhcmFtcygpOiBIdHRwUGFyYW1zIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxyXG4gICAgICAgIGxldCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgncGFnZScsIHRoaXMucGFnZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnbGltaXQnLCB0aGlzLmxpbWl0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zb3J0RmllbGQpIHtcclxuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZCgnc29ydCcsIHRoaXMuc29ydEZpZWxkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMuYXBwZW5kKCdkaXJlY3Rpb24nLCB0aGlzLnNvcnREaXJlY3Rpb24udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRBY3RpdmVGaWx0ZXJzKCkuZm9yRWFjaCgoZmlsdGVyOiBGaWx0ZXIpID0+IFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLmFwcGVuZChmaWx0ZXIua2V5LCBmaWx0ZXIudmFsdWUpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U29ydChmaWVsZCwgZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0RmllbGQgPSBmaWVsZDtcclxuICAgICAgICB0aGlzLnNvcnREaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgdGhpcy5yZXNldFBhZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldFBhZ2UoKSB7IFxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2UpIHRoaXMucGFnZSA9IDA7XHJcbiAgICB9XHJcbn0iXX0=