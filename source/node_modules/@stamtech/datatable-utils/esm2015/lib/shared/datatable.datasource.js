import { BehaviorSubject, of } from "rxjs";
import { catchError, finalize } from "rxjs/operators";
import { RowsResponse } from "../services/datatable.service.interface";
export class DatatableDatasource {
    constructor(rowsService) {
        this.rowsService = rowsService;
        this.rows = new BehaviorSubject([]);
        this.loadingSubject = new BehaviorSubject(false);
        this.loading$ = this.loadingSubject.asObservable();
        this.countSubject = new BehaviorSubject(0);
        this.counter$ = this.countSubject.asObservable();
    }
    connect(collectionViewer) {
        return this.rows.asObservable();
    }
    disconnect(collectionViewer) {
        this.rows.complete();
        this.loadingSubject.complete();
        this.countSubject.complete();
    }
    loadData(filterSet) {
        this.loadingSubject.next(true);
        this.rowsService.findAll(filterSet)
            .pipe(catchError(() => of(new RowsResponse())), finalize(() => this.loadingSubject.next(false)))
            .subscribe((result) => {
            this.rows.next(result.content);
            this.countSubject.next(result.totalElements);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLmRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9kYXRhdGFibGUtdXRpbHMvc3JjL2xpYi9zaGFyZWQvZGF0YXRhYmxlLmRhdGFzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxPQUFPLEVBQW9CLFlBQVksRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBR3pGLE1BQU0sT0FBTyxtQkFBbUI7SUFPNUIsWUFBb0IsV0FBZ0M7UUFBaEMsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBTjVDLFNBQUksR0FBRyxJQUFJLGVBQWUsQ0FBTSxFQUFFLENBQUMsQ0FBQztRQUNwQyxtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBQ3RELGFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzdDLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQVMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsYUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFFSyxDQUFDO0lBRXpELE9BQU8sQ0FBQyxnQkFBa0M7UUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxVQUFVLENBQUMsZ0JBQWtDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxRQUFRLENBQUMsU0FBb0I7UUFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQzlCLElBQUksQ0FDRCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxFQUFLLENBQUMsQ0FBQyxFQUMzQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDbEQ7YUFDQSxTQUFTLENBQUMsQ0FBQyxNQUF1QixFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb25WaWV3ZXIsIERhdGFTb3VyY2UgfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zXCJcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGZpbmFsaXplIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IEZpbHRlclNldCB9IGZyb20gXCIuL2RhdGF0YWJsZS50eXBlc1wiO1xyXG5pbXBvcnQgeyBEYXRhdGFibGVTZXJ2aWNlLCBSb3dzUmVzcG9uc2UgfSBmcm9tIFwiLi4vc2VydmljZXMvZGF0YXRhYmxlLnNlcnZpY2UuaW50ZXJmYWNlXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIERhdGF0YWJsZURhdGFzb3VyY2U8VD4gaW1wbGVtZW50cyBEYXRhU291cmNlPFQ+IHtcclxuICAgIHByaXZhdGUgcm93cyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VFtdPihbXSk7XHJcbiAgICBwcml2YXRlIGxvYWRpbmdTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XHJcbiAgICBwdWJsaWMgbG9hZGluZyQgPSB0aGlzLmxvYWRpbmdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgcHJpdmF0ZSBjb3VudFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4oMCk7XHJcbiAgICBwdWJsaWMgY291bnRlciQgPSB0aGlzLmNvdW50U3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3dzU2VydmljZTogRGF0YXRhYmxlU2VydmljZTxUPikgeyB9XHJcbiAgICBcclxuICAgIGNvbm5lY3QoY29sbGVjdGlvblZpZXdlcjogQ29sbGVjdGlvblZpZXdlcik6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNjb25uZWN0KGNvbGxlY3Rpb25WaWV3ZXI6IENvbGxlY3Rpb25WaWV3ZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJvd3MuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTdWJqZWN0LmNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5jb3VudFN1YmplY3QuY29tcGxldGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGF0YShmaWx0ZXJTZXQ6IEZpbHRlclNldCkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1N1YmplY3QubmV4dCh0cnVlKTtcclxuICAgICAgICB0aGlzLnJvd3NTZXJ2aWNlLmZpbmRBbGwoZmlsdGVyU2V0KVxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4gb2YobmV3IFJvd3NSZXNwb25zZTxUPigpKSksXHJcbiAgICAgICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiB0aGlzLmxvYWRpbmdTdWJqZWN0Lm5leHQoZmFsc2UpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHJlc3VsdDogUm93c1Jlc3BvbnNlPFQ+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3MubmV4dChyZXN1bHQuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50U3ViamVjdC5uZXh0KHJlc3VsdC50b3RhbEVsZW1lbnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iXX0=