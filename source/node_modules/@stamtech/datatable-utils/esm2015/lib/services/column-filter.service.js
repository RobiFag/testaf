import { BehaviorSubject } from 'rxjs';
import { Filter, FilterSet } from '../shared/datatable.types';
export class ColumnFilterService {
    constructor() {
        this.filterSet = new FilterSet();
        this.filterSetSubject = new BehaviorSubject(this.filterSet);
        this.filterSet$ = this.filterSetSubject.asObservable();
    }
    emitFilters() { this.filterSetSubject.next(this.filterSet); }
    // Filters methods  
    addFilter(key, label, type, options) {
        this.filterSet.add(new Filter(key, label, type, options));
        this.emitFilters();
    }
    removeFilter(key) {
        this.filterSet.remove(key);
        this.emitFilters();
    }
    setFilter(key, value) {
        let filter = this.filterSet.find(key);
        if (filter) {
            filter.value = value;
            this.emitFilters();
        }
    }
    clearFilter(key) { this.setFilter(key, null); }
    updateFilters(filterSet) {
        this.filterSet = filterSet;
        this.emitFilters();
    }
    isActive() {
        return this.filterSet.isActive();
    }
    disableFilter(key) {
        let filter = this.filterSet.find(key);
        if (filter) {
            filter.disabled = true;
            this.emitFilters();
        }
    }
    enableFilter(key) {
        let filter = this.filterSet.find(key);
        if (filter) {
            filter.disabled = false;
            this.emitFilters();
        }
    }
    clearFilters() {
        this.filterSet.clear();
        this.emitFilters();
    }
    // Paging methods
    setPage(page, limit) {
        this.filterSet.page = page;
        if (limit)
            this.filterSet.limit = limit;
        this.emitFilters();
    }
    setLimit(limit) {
        this.filterSet.limit = limit;
        this.emitFilters();
    }
    // Sorting methods
    setSort(field, direction) {
        this.filterSet.sortField = field;
        this.filterSet.sortDirection = direction;
        this.emitFilters();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZGF0YXRhYmxlLXV0aWxzL3NyYy9saWIvc2VydmljZXMvY29sdW1uLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLE1BQU0sRUFBZ0IsU0FBUyxFQUFjLE1BQU0sMkJBQTJCLENBQUM7QUFFeEYsTUFBTSxPQUFPLG1CQUFtQjtJQU05QjtRQUpRLGNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzVCLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRSxlQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBRWxDLENBQUM7SUFFakIsV0FBVyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3RCxvQkFBb0I7SUFDcEIsU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsSUFBZ0IsRUFBRSxPQUFtQztRQUN6RixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQVc7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVyxFQUFFLEtBQVU7UUFDL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVcsSUFBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUM7SUFFMUQsYUFBYSxDQUFDLFNBQW9CO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUNsQyxDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQVc7UUFDdkIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQVc7UUFDdEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQkFBaUI7SUFDakIsT0FBTyxDQUFDLElBQVcsRUFBRSxLQUFhO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLEtBQUs7WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDeEMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBWTtRQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEZpbHRlciwgRmlsdGVyT3B0aW9uLCBGaWx0ZXJTZXQsIEZpbHRlclR5cGUgfSBmcm9tICcuLi9zaGFyZWQvZGF0YXRhYmxlLnR5cGVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2x1bW5GaWx0ZXJTZXJ2aWNlIHtcclxuICBcclxuICBwcml2YXRlIGZpbHRlclNldCA9IG5ldyBGaWx0ZXJTZXQoKTtcclxuICBwcml2YXRlIGZpbHRlclNldFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEZpbHRlclNldD4odGhpcy5maWx0ZXJTZXQpO1xyXG4gIGZpbHRlclNldCQgPSB0aGlzLmZpbHRlclNldFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgZW1pdEZpbHRlcnMoKSB7IHRoaXMuZmlsdGVyU2V0U3ViamVjdC5uZXh0KHRoaXMuZmlsdGVyU2V0KTsgfVxyXG5cclxuICAvLyBGaWx0ZXJzIG1ldGhvZHMgIFxyXG4gIGFkZEZpbHRlcihrZXk6IHN0cmluZywgbGFiZWw6IHN0cmluZywgdHlwZTogRmlsdGVyVHlwZSwgb3B0aW9ucz86IChzdHJpbmcgfCBGaWx0ZXJPcHRpb24pW10pIHtcclxuICAgIHRoaXMuZmlsdGVyU2V0LmFkZChuZXcgRmlsdGVyKGtleSwgbGFiZWwsIHR5cGUsIG9wdGlvbnMpKTtcclxuICAgIHRoaXMuZW1pdEZpbHRlcnMoKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUZpbHRlcihrZXk6IHN0cmluZykgeyAgXHJcbiAgICB0aGlzLmZpbHRlclNldC5yZW1vdmUoa2V5KTsgICBcclxuICAgIHRoaXMuZW1pdEZpbHRlcnMoKTtcclxuICB9XHJcblxyXG4gIHNldEZpbHRlcihrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgbGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyU2V0LmZpbmQoa2V5KTtcclxuICAgIGlmIChmaWx0ZXIpIHtcclxuICAgICAgZmlsdGVyLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgIHRoaXMuZW1pdEZpbHRlcnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsZWFyRmlsdGVyKGtleTogc3RyaW5nKSB7ICB0aGlzLnNldEZpbHRlcihrZXksIG51bGwpOyAgIH1cclxuXHJcbiAgdXBkYXRlRmlsdGVycyhmaWx0ZXJTZXQ6IEZpbHRlclNldCkgeyBcclxuICAgIHRoaXMuZmlsdGVyU2V0ID0gZmlsdGVyU2V0O1xyXG4gICAgdGhpcy5lbWl0RmlsdGVycygpO1xyXG4gIH1cclxuXHJcbiAgaXNBY3RpdmUoKTogYm9vbGVhbiB7IFxyXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyU2V0LmlzQWN0aXZlKCkgXHJcbiAgfVxyXG5cclxuICBkaXNhYmxlRmlsdGVyKGtleTogc3RyaW5nKSB7XHJcbiAgICBsZXQgZmlsdGVyID0gdGhpcy5maWx0ZXJTZXQuZmluZChrZXkpO1xyXG4gICAgaWYgKGZpbHRlcikge1xyXG4gICAgICBmaWx0ZXIuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmVtaXRGaWx0ZXJzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbmFibGVGaWx0ZXIoa2V5OiBzdHJpbmcpIHtcclxuICAgIGxldCBmaWx0ZXIgPSB0aGlzLmZpbHRlclNldC5maW5kKGtleSk7XHJcbiAgICBpZiAoZmlsdGVyKSB7XHJcbiAgICAgIGZpbHRlci5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmVtaXRGaWx0ZXJzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhckZpbHRlcnMoKSB7IFxyXG4gICAgdGhpcy5maWx0ZXJTZXQuY2xlYXIoKTsgXHJcbiAgICB0aGlzLmVtaXRGaWx0ZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQYWdpbmcgbWV0aG9kc1xyXG4gIHNldFBhZ2UocGFnZTpudW1iZXIsIGxpbWl0PzpudW1iZXIpIHsgXHJcbiAgICB0aGlzLmZpbHRlclNldC5wYWdlID0gcGFnZTsgXHJcbiAgICBpZiAobGltaXQpIHRoaXMuZmlsdGVyU2V0LmxpbWl0ID0gbGltaXQ7IFxyXG4gICAgdGhpcy5lbWl0RmlsdGVycygpO1xyXG4gIH1cclxuXHJcbiAgc2V0TGltaXQobGltaXQ6bnVtYmVyKSB7IFxyXG4gICAgdGhpcy5maWx0ZXJTZXQubGltaXQgPSBsaW1pdDsgXHJcbiAgICB0aGlzLmVtaXRGaWx0ZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBTb3J0aW5nIG1ldGhvZHNcclxuICBzZXRTb3J0KGZpZWxkLCBkaXJlY3Rpb24pIHtcclxuICAgIHRoaXMuZmlsdGVyU2V0LnNvcnRGaWVsZCA9IGZpZWxkO1xyXG4gICAgdGhpcy5maWx0ZXJTZXQuc29ydERpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgIHRoaXMuZW1pdEZpbHRlcnMoKTtcclxuICB9XHJcbn1cclxuIl19